"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var prisma_binding_1 = require("prisma-binding");
/**
 * Type Defs
*/
var typeDefs = "type AggregateTweet {\n  count: Int!\n}\n\ntype AggregateUser {\n  count: Int!\n}\n\ntype BatchPayload {\n  \"\"\"The number of nodes that have been affected by the Batch operation.\"\"\"\n  count: Long!\n}\n\nscalar DateTime\n\n\"\"\"\nThe `Long` scalar type represents non-fractional signed whole numeric values.\nLong can represent values between -(2^63) and 2^63 - 1.\n\"\"\"\nscalar Long\n\ntype Mutation {\n  createTweet(data: TweetCreateInput!): Tweet!\n  createUser(data: UserCreateInput!): User!\n  updateTweet(data: TweetUpdateInput!, where: TweetWhereUniqueInput!): Tweet\n  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User\n  deleteTweet(where: TweetWhereUniqueInput!): Tweet\n  deleteUser(where: UserWhereUniqueInput!): User\n  upsertTweet(where: TweetWhereUniqueInput!, create: TweetCreateInput!, update: TweetUpdateInput!): Tweet!\n  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!\n  updateManyTweets(data: TweetUpdateInput!, where: TweetWhereInput): BatchPayload!\n  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!\n  deleteManyTweets(where: TweetWhereInput): BatchPayload!\n  deleteManyUsers(where: UserWhereInput): BatchPayload!\n}\n\nenum MutationType {\n  CREATED\n  UPDATED\n  DELETED\n}\n\n\"\"\"An object with an ID\"\"\"\ninterface Node {\n  \"\"\"The id of the object.\"\"\"\n  id: ID!\n}\n\n\"\"\"Information about pagination in a connection.\"\"\"\ntype PageInfo {\n  \"\"\"When paginating forwards, are there more items?\"\"\"\n  hasNextPage: Boolean!\n\n  \"\"\"When paginating backwards, are there more items?\"\"\"\n  hasPreviousPage: Boolean!\n\n  \"\"\"When paginating backwards, the cursor to continue.\"\"\"\n  startCursor: String\n\n  \"\"\"When paginating forwards, the cursor to continue.\"\"\"\n  endCursor: String\n}\n\ntype Query {\n  tweets(where: TweetWhereInput, orderBy: TweetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tweet]!\n  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!\n  tweet(where: TweetWhereUniqueInput!): Tweet\n  user(where: UserWhereUniqueInput!): User\n  tweetsConnection(where: TweetWhereInput, orderBy: TweetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TweetConnection!\n  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!\n\n  \"\"\"Fetches an object given its ID\"\"\"\n  node(\n    \"\"\"The ID of an object\"\"\"\n    id: ID!\n  ): Node\n}\n\ntype Subscription {\n  tweet(where: TweetSubscriptionWhereInput): TweetSubscriptionPayload\n  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload\n}\n\ntype Tweet implements Node {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  text: String!\n  author(where: UserWhereInput): User!\n}\n\n\"\"\"A connection to a list of items.\"\"\"\ntype TweetConnection {\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"A list of edges.\"\"\"\n  edges: [TweetEdge]!\n  aggregate: AggregateTweet!\n}\n\ninput TweetCreateInput {\n  text: String!\n  author: UserCreateOneWithoutTweetsInput!\n}\n\ninput TweetCreateManyWithoutAuthorInput {\n  create: [TweetCreateWithoutAuthorInput!]\n  connect: [TweetWhereUniqueInput!]\n}\n\ninput TweetCreateWithoutAuthorInput {\n  text: String!\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype TweetEdge {\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: Tweet!\n\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n}\n\nenum TweetOrderByInput {\n  id_ASC\n  id_DESC\n  createdAt_ASC\n  createdAt_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n  text_ASC\n  text_DESC\n}\n\ntype TweetPreviousValues {\n  id: ID!\n  createdAt: DateTime!\n  updatedAt: DateTime!\n  text: String!\n}\n\ntype TweetSubscriptionPayload {\n  mutation: MutationType!\n  node: Tweet\n  updatedFields: [String!]\n  previousValues: TweetPreviousValues\n}\n\ninput TweetSubscriptionWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [TweetSubscriptionWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [TweetSubscriptionWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [TweetSubscriptionWhereInput!]\n\n  \"\"\"\n  The subscription event gets dispatched when it's listed in mutation_in\n  \"\"\"\n  mutation_in: [MutationType!]\n\n  \"\"\"\n  The subscription event gets only dispatched when one of the updated fields names is included in this list\n  \"\"\"\n  updatedFields_contains: String\n\n  \"\"\"\n  The subscription event gets only dispatched when all of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_every: [String!]\n\n  \"\"\"\n  The subscription event gets only dispatched when some of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_some: [String!]\n  node: TweetWhereInput\n}\n\ninput TweetUpdateInput {\n  text: String\n  author: UserUpdateOneWithoutTweetsInput\n}\n\ninput TweetUpdateManyWithoutAuthorInput {\n  create: [TweetCreateWithoutAuthorInput!]\n  connect: [TweetWhereUniqueInput!]\n  disconnect: [TweetWhereUniqueInput!]\n  delete: [TweetWhereUniqueInput!]\n  update: [TweetUpdateWithWhereUniqueWithoutAuthorInput!]\n  upsert: [TweetUpsertWithWhereUniqueWithoutAuthorInput!]\n}\n\ninput TweetUpdateWithoutAuthorDataInput {\n  text: String\n}\n\ninput TweetUpdateWithWhereUniqueWithoutAuthorInput {\n  where: TweetWhereUniqueInput!\n  data: TweetUpdateWithoutAuthorDataInput!\n}\n\ninput TweetUpsertWithWhereUniqueWithoutAuthorInput {\n  where: TweetWhereUniqueInput!\n  update: TweetUpdateWithoutAuthorDataInput!\n  create: TweetCreateWithoutAuthorInput!\n}\n\ninput TweetWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [TweetWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [TweetWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [TweetWhereInput!]\n  id: ID\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  id_not: ID\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  id_in: [ID!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  id_not_in: [ID!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  id_lt: ID\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  id_lte: ID\n\n  \"\"\"All values greater than the given value.\"\"\"\n  id_gt: ID\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  id_gte: ID\n\n  \"\"\"All values containing the given string.\"\"\"\n  id_contains: ID\n\n  \"\"\"All values not containing the given string.\"\"\"\n  id_not_contains: ID\n\n  \"\"\"All values starting with the given string.\"\"\"\n  id_starts_with: ID\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  id_not_starts_with: ID\n\n  \"\"\"All values ending with the given string.\"\"\"\n  id_ends_with: ID\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  id_not_ends_with: ID\n  createdAt: DateTime\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  createdAt_not: DateTime\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  createdAt_in: [DateTime!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  createdAt_not_in: [DateTime!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  createdAt_lt: DateTime\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  createdAt_lte: DateTime\n\n  \"\"\"All values greater than the given value.\"\"\"\n  createdAt_gt: DateTime\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  createdAt_gte: DateTime\n  updatedAt: DateTime\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  updatedAt_not: DateTime\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  updatedAt_in: [DateTime!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  updatedAt_not_in: [DateTime!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  updatedAt_lt: DateTime\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  updatedAt_lte: DateTime\n\n  \"\"\"All values greater than the given value.\"\"\"\n  updatedAt_gt: DateTime\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  updatedAt_gte: DateTime\n  text: String\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  text_not: String\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  text_in: [String!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  text_not_in: [String!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  text_lt: String\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  text_lte: String\n\n  \"\"\"All values greater than the given value.\"\"\"\n  text_gt: String\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  text_gte: String\n\n  \"\"\"All values containing the given string.\"\"\"\n  text_contains: String\n\n  \"\"\"All values not containing the given string.\"\"\"\n  text_not_contains: String\n\n  \"\"\"All values starting with the given string.\"\"\"\n  text_starts_with: String\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  text_not_starts_with: String\n\n  \"\"\"All values ending with the given string.\"\"\"\n  text_ends_with: String\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  text_not_ends_with: String\n  author: UserWhereInput\n}\n\ninput TweetWhereUniqueInput {\n  id: ID\n}\n\ntype User implements Node {\n  id: ID!\n  email: String!\n  password: String!\n  name: String!\n  picture: String\n  tweets(where: TweetWhereInput, orderBy: TweetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tweet!]\n}\n\n\"\"\"A connection to a list of items.\"\"\"\ntype UserConnection {\n  \"\"\"Information to aid in pagination.\"\"\"\n  pageInfo: PageInfo!\n\n  \"\"\"A list of edges.\"\"\"\n  edges: [UserEdge]!\n  aggregate: AggregateUser!\n}\n\ninput UserCreateInput {\n  email: String!\n  password: String!\n  name: String!\n  username: String!\n  picture: String\n  tweets: TweetCreateManyWithoutAuthorInput\n}\n\ninput UserCreateOneWithoutTweetsInput {\n  create: UserCreateWithoutTweetsInput\n  connect: UserWhereUniqueInput\n}\n\ninput UserCreateWithoutTweetsInput {\n  email: String!\n  password: String!\n  name: String!\n  picture: String\n}\n\n\"\"\"An edge in a connection.\"\"\"\ntype UserEdge {\n  \"\"\"The item at the end of the edge.\"\"\"\n  node: User!\n\n  \"\"\"A cursor for use in pagination.\"\"\"\n  cursor: String!\n}\n\nenum UserOrderByInput {\n  id_ASC\n  id_DESC\n  email_ASC\n  email_DESC\n  password_ASC\n  password_DESC\n  name_ASC\n  name_DESC\n  picture_ASC\n  picture_DESC\n  updatedAt_ASC\n  updatedAt_DESC\n  createdAt_ASC\n  createdAt_DESC\n}\n\ntype UserPreviousValues {\n  id: ID!\n  email: String!\n  password: String!\n  name: String!\n  picture: String\n}\n\ntype UserSubscriptionPayload {\n  mutation: MutationType!\n  node: User\n  updatedFields: [String!]\n  previousValues: UserPreviousValues\n}\n\ninput UserSubscriptionWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [UserSubscriptionWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [UserSubscriptionWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [UserSubscriptionWhereInput!]\n\n  \"\"\"\n  The subscription event gets dispatched when it's listed in mutation_in\n  \"\"\"\n  mutation_in: [MutationType!]\n\n  \"\"\"\n  The subscription event gets only dispatched when one of the updated fields names is included in this list\n  \"\"\"\n  updatedFields_contains: String\n\n  \"\"\"\n  The subscription event gets only dispatched when all of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_every: [String!]\n\n  \"\"\"\n  The subscription event gets only dispatched when some of the field names included in this list have been updated\n  \"\"\"\n  updatedFields_contains_some: [String!]\n  node: UserWhereInput\n}\n\ninput UserUpdateInput {\n  email: String\n  password: String\n  name: String\n  picture: String\n  tweets: TweetUpdateManyWithoutAuthorInput\n}\n\ninput UserUpdateOneWithoutTweetsInput {\n  create: UserCreateWithoutTweetsInput\n  connect: UserWhereUniqueInput\n  delete: Boolean\n  update: UserUpdateWithoutTweetsDataInput\n  upsert: UserUpsertWithoutTweetsInput\n}\n\ninput UserUpdateWithoutTweetsDataInput {\n  email: String\n  password: String\n  name: String\n  picture: String\n}\n\ninput UserUpsertWithoutTweetsInput {\n  update: UserUpdateWithoutTweetsDataInput!\n  create: UserCreateWithoutTweetsInput!\n}\n\ninput UserWhereInput {\n  \"\"\"Logical AND on all given filters.\"\"\"\n  AND: [UserWhereInput!]\n\n  \"\"\"Logical OR on all given filters.\"\"\"\n  OR: [UserWhereInput!]\n\n  \"\"\"Logical NOT on all given filters combined by AND.\"\"\"\n  NOT: [UserWhereInput!]\n  id: ID\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  id_not: ID\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  id_in: [ID!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  id_not_in: [ID!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  id_lt: ID\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  id_lte: ID\n\n  \"\"\"All values greater than the given value.\"\"\"\n  id_gt: ID\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  id_gte: ID\n\n  \"\"\"All values containing the given string.\"\"\"\n  id_contains: ID\n\n  \"\"\"All values not containing the given string.\"\"\"\n  id_not_contains: ID\n\n  \"\"\"All values starting with the given string.\"\"\"\n  id_starts_with: ID\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  id_not_starts_with: ID\n\n  \"\"\"All values ending with the given string.\"\"\"\n  id_ends_with: ID\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  id_not_ends_with: ID\n  email: String\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  email_not: String\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  email_in: [String!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  email_not_in: [String!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  email_lt: String\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  email_lte: String\n\n  \"\"\"All values greater than the given value.\"\"\"\n  email_gt: String\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  email_gte: String\n\n  \"\"\"All values containing the given string.\"\"\"\n  email_contains: String\n\n  \"\"\"All values not containing the given string.\"\"\"\n  email_not_contains: String\n\n  \"\"\"All values starting with the given string.\"\"\"\n  email_starts_with: String\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  email_not_starts_with: String\n\n  \"\"\"All values ending with the given string.\"\"\"\n  email_ends_with: String\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  email_not_ends_with: String\n  password: String\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  password_not: String\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  password_in: [String!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  password_not_in: [String!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  password_lt: String\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  password_lte: String\n\n  \"\"\"All values greater than the given value.\"\"\"\n  password_gt: String\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  password_gte: String\n\n  \"\"\"All values containing the given string.\"\"\"\n  password_contains: String\n\n  \"\"\"All values not containing the given string.\"\"\"\n  password_not_contains: String\n\n  \"\"\"All values starting with the given string.\"\"\"\n  password_starts_with: String\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  password_not_starts_with: String\n\n  \"\"\"All values ending with the given string.\"\"\"\n  password_ends_with: String\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  password_not_ends_with: String\n  name: String\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  name_not: String\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  name_in: [String!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  name_not_in: [String!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  name_lt: String\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  name_lte: String\n\n  \"\"\"All values greater than the given value.\"\"\"\n  name_gt: String\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  name_gte: String\n\n  \"\"\"All values containing the given string.\"\"\"\n  name_contains: String\n\n  \"\"\"All values not containing the given string.\"\"\"\n  name_not_contains: String\n\n  \"\"\"All values starting with the given string.\"\"\"\n  name_starts_with: String\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  name_not_starts_with: String\n\n  \"\"\"All values ending with the given string.\"\"\"\n  name_ends_with: String\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  name_not_ends_with: String\n  picture: String\n\n  \"\"\"All values that are not equal to given value.\"\"\"\n  picture_not: String\n\n  \"\"\"All values that are contained in given list.\"\"\"\n  picture_in: [String!]\n\n  \"\"\"All values that are not contained in given list.\"\"\"\n  picture_not_in: [String!]\n\n  \"\"\"All values less than the given value.\"\"\"\n  picture_lt: String\n\n  \"\"\"All values less than or equal the given value.\"\"\"\n  picture_lte: String\n\n  \"\"\"All values greater than the given value.\"\"\"\n  picture_gt: String\n\n  \"\"\"All values greater than or equal the given value.\"\"\"\n  picture_gte: String\n\n  \"\"\"All values containing the given string.\"\"\"\n  picture_contains: String\n\n  \"\"\"All values not containing the given string.\"\"\"\n  picture_not_contains: String\n\n  \"\"\"All values starting with the given string.\"\"\"\n  picture_starts_with: String\n\n  \"\"\"All values not starting with the given string.\"\"\"\n  picture_not_starts_with: String\n\n  \"\"\"All values ending with the given string.\"\"\"\n  picture_ends_with: String\n\n  \"\"\"All values not ending with the given string.\"\"\"\n  picture_not_ends_with: String\n  tweets_every: TweetWhereInput\n  tweets_some: TweetWhereInput\n  tweets_none: TweetWhereInput\n}\n\ninput UserWhereUniqueInput {\n  id: ID\n  email: String\n}\n";
exports.Prisma = prisma_binding_1.makePrismaBindingClass({ typeDefs: typeDefs });
//# sourceMappingURL=prisma.js.map